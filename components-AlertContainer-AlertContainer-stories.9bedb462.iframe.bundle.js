"use strict";(self.webpackChunkreact_cloudbox_alerts=self.webpackChunkreact_cloudbox_alerts||[]).push([[31],{"./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[6].use[1]!./src/components/AlertContainer/AlertContainer.module.css":(module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>__WEBPACK_DEFAULT_EXPORT__});var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/css-loader/dist/runtime/sourceMaps.js"),_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__),_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/css-loader/dist/runtime/api.js"),___CSS_LOADER_EXPORT___=__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__)()(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default());___CSS_LOADER_EXPORT___.push([module.id,'.Zu3fNTuiVvbCQFE2swdT {\n  display: flex;\n  flex-direction: column;\n  align-items: flex-end;\n  pointer-events: none; /* Allow clicks to pass through container */\n}\n\n/* Styles for elements inside container */\n.Qwjq8030GS8SQNHv6Oxu {\n  pointer-events: auto; /* Re-enable pointer events for alerts */\n  width: 100%;\n  transition: all 0.3s ease;\n}\n\n/* Dark mode styles */\n.PXcvB1HaKBWuaHwdjIj8 {\n  /* Dark mode specific styles */\n  --alert-text-color: #ffffff;\n  --alert-bg-color: #121212;\n  --alert-border-color: #27272A;\n}\n\n/* Positions */\n.Zu3fNTuiVvbCQFE2swdT[data-position="top-right"] {\n  align-items: flex-end;\n}\n\n.Zu3fNTuiVvbCQFE2swdT[data-position="top-left"] {\n  align-items: flex-start;\n}\n\n.Zu3fNTuiVvbCQFE2swdT[data-position="top-center"] {\n  align-items: center;\n}\n\n.Zu3fNTuiVvbCQFE2swdT[data-position="bottom-right"] {\n  align-items: flex-end;\n  flex-direction: column-reverse;\n}\n\n.Zu3fNTuiVvbCQFE2swdT[data-position="bottom-left"] {\n  align-items: flex-start;\n  flex-direction: column-reverse;\n}\n\n.Zu3fNTuiVvbCQFE2swdT[data-position="bottom-center"] {\n  align-items: center;\n  flex-direction: column-reverse;\n}',"",{version:3,sources:["webpack://./src/components/AlertContainer/AlertContainer.module.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,sBAAsB;EACtB,qBAAqB;EACrB,oBAAoB,EAAE,2CAA2C;AACnE;;AAEA,yCAAyC;AACzC;EACE,oBAAoB,EAAE,wCAAwC;EAC9D,WAAW;EACX,yBAAyB;AAC3B;;AAEA,qBAAqB;AACrB;EACE,8BAA8B;EAC9B,2BAA2B;EAC3B,yBAAyB;EACzB,6BAA6B;AAC/B;;AAEA,cAAc;AACd;EACE,qBAAqB;AACvB;;AAEA;EACE,uBAAuB;AACzB;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,qBAAqB;EACrB,8BAA8B;AAChC;;AAEA;EACE,uBAAuB;EACvB,8BAA8B;AAChC;;AAEA;EACE,mBAAmB;EACnB,8BAA8B;AAChC",sourcesContent:['.alertContainer {\n  display: flex;\n  flex-direction: column;\n  align-items: flex-end;\n  pointer-events: none; /* Allow clicks to pass through container */\n}\n\n/* Styles for elements inside container */\n.alertWrapper {\n  pointer-events: auto; /* Re-enable pointer events for alerts */\n  width: 100%;\n  transition: all 0.3s ease;\n}\n\n/* Dark mode styles */\n.darkMode {\n  /* Dark mode specific styles */\n  --alert-text-color: #ffffff;\n  --alert-bg-color: #121212;\n  --alert-border-color: #27272A;\n}\n\n/* Positions */\n.alertContainer[data-position="top-right"] {\n  align-items: flex-end;\n}\n\n.alertContainer[data-position="top-left"] {\n  align-items: flex-start;\n}\n\n.alertContainer[data-position="top-center"] {\n  align-items: center;\n}\n\n.alertContainer[data-position="bottom-right"] {\n  align-items: flex-end;\n  flex-direction: column-reverse;\n}\n\n.alertContainer[data-position="bottom-left"] {\n  align-items: flex-start;\n  flex-direction: column-reverse;\n}\n\n.alertContainer[data-position="bottom-center"] {\n  align-items: center;\n  flex-direction: column-reverse;\n}'],sourceRoot:""}]),___CSS_LOADER_EXPORT___.locals={alertContainer:"Zu3fNTuiVvbCQFE2swdT",alertWrapper:"Qwjq8030GS8SQNHv6Oxu",darkMode:"PXcvB1HaKBWuaHwdjIj8"};const __WEBPACK_DEFAULT_EXPORT__=___CSS_LOADER_EXPORT___},"./src/components/AlertContainer/AlertContainer.stories.jsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{BottomLeft:()=>BottomLeft,DarkMode:()=>DarkMode,Default:()=>Default,NoLimit:()=>NoLimit,TopCenter:()=>TopCenter,__namedExportsOrder:()=>__namedExportsOrder,default:()=>AlertContainer_stories});var react=__webpack_require__("./node_modules/react/index.js"),prop_types=__webpack_require__("./node_modules/prop-types/index.js"),prop_types_default=__webpack_require__.n(prop_types),Alert=__webpack_require__("./src/components/Alert/Alert.jsx"),ThemeContext=__webpack_require__("./src/context/ThemeContext.js");const hooks_useTheme=()=>{const context=(0,react.useContext)(ThemeContext.Dx);if(void 0===context)throw new Error("useTheme must be used within a ThemeProvider");return context};var injectStylesIntoStyleTag=__webpack_require__("./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js"),injectStylesIntoStyleTag_default=__webpack_require__.n(injectStylesIntoStyleTag),styleDomAPI=__webpack_require__("./node_modules/style-loader/dist/runtime/styleDomAPI.js"),styleDomAPI_default=__webpack_require__.n(styleDomAPI),insertBySelector=__webpack_require__("./node_modules/style-loader/dist/runtime/insertBySelector.js"),insertBySelector_default=__webpack_require__.n(insertBySelector),setAttributesWithoutAttributes=__webpack_require__("./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js"),setAttributesWithoutAttributes_default=__webpack_require__.n(setAttributesWithoutAttributes),insertStyleElement=__webpack_require__("./node_modules/style-loader/dist/runtime/insertStyleElement.js"),insertStyleElement_default=__webpack_require__.n(insertStyleElement),styleTagTransform=__webpack_require__("./node_modules/style-loader/dist/runtime/styleTagTransform.js"),styleTagTransform_default=__webpack_require__.n(styleTagTransform),AlertContainer_module=__webpack_require__("./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[6].use[1]!./src/components/AlertContainer/AlertContainer.module.css"),options={};options.styleTagTransform=styleTagTransform_default(),options.setAttributes=setAttributesWithoutAttributes_default(),options.insert=insertBySelector_default().bind(null,"head"),options.domAPI=styleDomAPI_default(),options.insertStyleElement=insertStyleElement_default();injectStylesIntoStyleTag_default()(AlertContainer_module.A,options);const AlertContainer_AlertContainer_module=AlertContainer_module.A&&AlertContainer_module.A.locals?AlertContainer_module.A.locals:void 0,AlertContainer=({position="top-right",newestOnTop=!0,limit=5,spacing=10,containerWidth=300,iconSet="ri",darkMode:propDarkMode,offset=20,zIndex=9999})=>{const[alerts,setAlerts]=(0,react.useState)([]),alertIdCounter=(0,react.useRef)(0),containerRef=(0,react.useRef)(null),{darkMode:themeDarkMode}=hooks_useTheme(),darkMode=void 0!==propDarkMode?propDarkMode:themeDarkMode,[vPosition,hPosition]=position.split("-"),addAlert=(0,react.useCallback)((alertProps=>{const id=alertIdCounter.current++;let defaultAnimation="fade";return position.includes("top")&&(defaultAnimation="slide-down"),position.includes("bottom")&&(defaultAnimation="slide-up"),position.includes("left")&&(defaultAnimation="slide-right"),position.includes("right")&&(defaultAnimation="slide-left"),setAlerts((prevAlerts=>{const newAlert={id,...alertProps,animation:alertProps.animation||defaultAnimation,position:alertProps.position||vPosition,timestamp:Date.now()};let updatedAlerts=newestOnTop?[newAlert,...prevAlerts]:[...prevAlerts,newAlert];return limit>0&&updatedAlerts.length>limit&&(updatedAlerts=updatedAlerts.slice(0,limit)),updatedAlerts})),id}),[position,vPosition,newestOnTop,limit]),removeAlert=(0,react.useCallback)((id=>{setAlerts((prevAlerts=>prevAlerts.filter((alert=>alert.id!==id))))}),[]);(0,react.useEffect)((()=>(window.cloudboxAlerts=window.cloudboxAlerts||{},window.cloudboxAlerts.show=(message,options={})=>addAlert({children:message,...options}),window.cloudboxAlerts.success=(message,options={})=>addAlert({children:message,variant:"success",withIcon:!0,...options}),window.cloudboxAlerts.error=(message,options={})=>addAlert({children:message,variant:"danger",withIcon:!0,...options}),window.cloudboxAlerts.warning=(message,options={})=>addAlert({children:message,variant:"warning",withIcon:!0,...options}),window.cloudboxAlerts.info=(message,options={})=>addAlert({children:message,variant:"info",withIcon:!0,...options}),window.cloudboxAlerts.remove=removeAlert,window.cloudboxAlerts.clear=()=>{setAlerts([])},()=>{delete window.cloudboxAlerts})),[addAlert,removeAlert]);const sortedAlerts=newestOnTop?alerts:[...alerts].sort(((a,b)=>b.timestamp-a.timestamp)),containerStyle={position:"fixed",zIndex,maxWidth:`${containerWidth}px`,width:"100%"};return position.includes("top")&&(containerStyle.top=`${offset}px`),position.includes("bottom")&&(containerStyle.bottom=`${offset}px`),position.includes("left")&&(containerStyle.left=`${offset}px`),position.includes("right")&&(containerStyle.right=`${offset}px`),"top-center"!==position&&"bottom-center"!==position||(containerStyle.left="50%",containerStyle.transform="translateX(-50%)"),react.createElement("div",{ref:containerRef,className:`${AlertContainer_AlertContainer_module.alertContainer} ${darkMode?AlertContainer_AlertContainer_module.darkMode:""}`,style:containerStyle,"data-position":position},sortedAlerts.map(((alert,index)=>react.createElement("div",{key:alert.id,className:AlertContainer_AlertContainer_module.alertWrapper,style:{marginBottom:`${index<sortedAlerts.length-1?spacing:0}px`}},react.createElement(Alert.A,{...alert,iconSet,dismissible:!1!==alert.dismissible,onDismiss:()=>removeAlert(alert.id)})))))};AlertContainer.propTypes={position:prop_types_default().oneOf(["top-right","top-left","top-center","bottom-right","bottom-left","bottom-center"]),newestOnTop:prop_types_default().bool,limit:prop_types_default().number,spacing:prop_types_default().number,containerWidth:prop_types_default().number,iconSet:prop_types_default().string,darkMode:prop_types_default().bool,offset:prop_types_default().number,zIndex:prop_types_default().number};const AlertContainer_AlertContainer=AlertContainer;AlertContainer.__docgenInfo={description:"AlertContainer Component\n\nA global container for displaying alerts that can be triggered from anywhere in the app.\nManages multiple alerts and their dismissal.",methods:[],displayName:"AlertContainer",props:{position:{defaultValue:{value:"'top-right'",computed:!1},description:"Container position on screen",type:{name:"enum",value:[{value:"'top-right'",computed:!1},{value:"'top-left'",computed:!1},{value:"'top-center'",computed:!1},{value:"'bottom-right'",computed:!1},{value:"'bottom-left'",computed:!1},{value:"'bottom-center'",computed:!1}]},required:!1},newestOnTop:{defaultValue:{value:"true",computed:!1},description:"Show newest alerts on top",type:{name:"bool"},required:!1},limit:{defaultValue:{value:"5",computed:!1},description:"Maximum number of alerts to show at once (0 = unlimited)",type:{name:"number"},required:!1},spacing:{defaultValue:{value:"10",computed:!1},description:"Space between alerts in pixels",type:{name:"number"},required:!1},containerWidth:{defaultValue:{value:"300",computed:!1},description:"Container width in pixels",type:{name:"number"},required:!1},iconSet:{defaultValue:{value:"'ri'",computed:!1},description:"Icon set to use (passed to Alert component)",type:{name:"string"},required:!1},offset:{defaultValue:{value:"20",computed:!1},description:"Offset from edge of screen in pixels",type:{name:"number"},required:!1},zIndex:{defaultValue:{value:"9999",computed:!1},description:"Z-index of the container",type:{name:"number"},required:!1},darkMode:{description:"Override darkMode from theme context",type:{name:"bool"},required:!1}}};const AlertService={show:(message,options={})=>window.cloudboxAlerts?.show?window.cloudboxAlerts.show(message,options):(console.warn("AlertContainer not mounted yet. Falling back to console log."),console.log(message),-1),success:(message,options={})=>window.cloudboxAlerts?.success?window.cloudboxAlerts.success(message,options):(console.warn("AlertContainer not mounted yet. Falling back to console log."),console.log("[SUCCESS]",message),-1),error:(message,options={})=>window.cloudboxAlerts?.error?window.cloudboxAlerts.error(message,options):(console.warn("AlertContainer not mounted yet. Falling back to console log."),console.error(message),-1),warning:(message,options={})=>window.cloudboxAlerts?.warning?window.cloudboxAlerts.warning(message,options):(console.warn("AlertContainer not mounted yet. Falling back to console log."),console.warn(message),-1),info:(message,options={})=>window.cloudboxAlerts?.info?window.cloudboxAlerts.info(message,options):(console.warn("AlertContainer not mounted yet. Falling back to console log."),console.info(message),-1),remove:id=>{window.cloudboxAlerts?.remove&&window.cloudboxAlerts.remove(id)},clear:()=>{window.cloudboxAlerts?.clear&&window.cloudboxAlerts.clear()},confirm:(message,options={})=>new Promise(((resolve,reject)=>{if(!window.cloudboxAlerts?.show)return console.warn("AlertContainer not mounted yet. Falling back to browser confirm."),void(window.confirm(message)?resolve():reject(new Error("User cancelled")));const id=window.cloudboxAlerts.show(react.createElement("div",null,react.createElement("div",null,message),react.createElement("div",{style:{marginTop:"10px",display:"flex",justifyContent:"flex-end",gap:"8px"}},react.createElement("button",{onClick:()=>{window.cloudboxAlerts.remove(id),reject(new Error("User cancelled"))},style:{padding:"5px 10px"}},options.cancelText||"Cancel"),react.createElement("button",{onClick:()=>{window.cloudboxAlerts.remove(id),resolve()},style:{padding:"5px 10px",fontWeight:"bold"}},options.confirmText||"Confirm"))),{variant:options.variant||"warning",withIcon:!1!==options.withIcon,autoHideDuration:0,dismissible:!1,...options})})),progress:(message,options={})=>{if(!window.cloudboxAlerts?.show)return console.warn("AlertContainer not mounted yet. Falling back to console log."),console.log("[PROGRESS]",message),{update:(newMessage,progress)=>{console.log("[PROGRESS UPDATE]",newMessage,`${Math.round(100*progress)}%`)},complete:finalMessage=>{console.log("[PROGRESS COMPLETE]",finalMessage)},error:errorMessage=>{console.error("[PROGRESS ERROR]",errorMessage)}};let progress=options.initialProgress||0;const createProgressBar=value=>react.createElement("div",{style:{width:"100%",height:"8px",backgroundColor:"rgba(0,0,0,0.1)",borderRadius:"4px",marginTop:"8px",overflow:"hidden"}},react.createElement("div",{style:{width:100*value+"%",height:"100%",backgroundColor:options.progressColor||"#4caf50",transition:"width 0.3s ease-in-out"}})),id=window.cloudboxAlerts.show(react.createElement("div",null,react.createElement("div",null,message),createProgressBar(progress)),{variant:options.variant||"info",withIcon:!0,autoHideDuration:0,dismissible:options.dismissible||!1,...options});return{update:(newMessage,newProgress)=>{progress=newProgress,window.cloudboxAlerts.show(react.createElement("div",null,react.createElement("div",null,newMessage||message),createProgressBar(progress)),{id,variant:options.variant||"info",withIcon:!0,autoHideDuration:0,dismissible:options.dismissible||!1,...options})},complete:finalMessage=>{window.cloudboxAlerts.remove(id),window.cloudboxAlerts.success(finalMessage||"Operation completed successfully",{autoHideDuration:options.completeDuration||3e3,...options})},error:errorMessage=>{window.cloudboxAlerts.remove(id),window.cloudboxAlerts.error(errorMessage||"Operation failed",{autoHideDuration:options.errorDuration||5e3,...options})}}}},AlertService_AlertService=AlertService,AlertContainer_stories={title:"Components/AlertContainer",component:AlertContainer_AlertContainer,parameters:{docs:{description:{component:"A container for managing and displaying alerts triggered via the AlertService."}},layout:"fullscreen"},argTypes:{position:{control:{type:"select",options:["top-right","top-left","top-center","bottom-right","bottom-left","bottom-center"]},description:"Container position on screen",table:{type:{summary:"string"},defaultValue:{summary:"top-right"}}},newestOnTop:{control:"boolean",description:"Show newest alerts on top",table:{type:{summary:"boolean"},defaultValue:{summary:!0}}},limit:{control:"number",description:"Maximum number of alerts to show at once (0 = unlimited)",table:{type:{summary:"number"},defaultValue:{summary:5}}},spacing:{control:"number",description:"Space between alerts in pixels",table:{type:{summary:"number"},defaultValue:{summary:10}}},containerWidth:{control:"number",description:"Container width in pixels",table:{type:{summary:"number"},defaultValue:{summary:300}}},darkMode:{control:"boolean",description:"Override darkMode from theme context",table:{type:{summary:"boolean"}}},offset:{control:"number",description:"Offset from edge of screen in pixels",table:{type:{summary:"number"},defaultValue:{summary:20}}},zIndex:{control:"number",description:"Z-index of the container",table:{type:{summary:"number"},defaultValue:{summary:9999}}}}},Template=args=>(react.useEffect((()=>()=>{AlertService_AlertService.clear()}),[]),react.createElement("div",{style:{padding:"1rem"}},react.createElement(AlertContainer_AlertContainer,args),react.createElement("div",{style:{marginBottom:"2rem"}},react.createElement("h2",null,"AlertContainer Demo"),react.createElement("p",null,"Try the different buttons below to show various alert types:")),react.createElement("div",{style:{display:"flex",flexWrap:"wrap",gap:"0.5rem",marginBottom:"1rem"}},react.createElement("button",{onClick:()=>AlertService_AlertService.success("Success message!"),style:{padding:"0.5rem 1rem",background:"#57d25f",color:"white",border:"none",borderRadius:"4px",cursor:"pointer"}},"Show Success"),react.createElement("button",{onClick:()=>AlertService_AlertService.error("Error message!"),style:{padding:"0.5rem 1rem",background:"#e873a9",color:"white",border:"none",borderRadius:"4px",cursor:"pointer"}},"Show Error"),react.createElement("button",{onClick:()=>AlertService_AlertService.warning("Warning message!"),style:{padding:"0.5rem 1rem",background:"#f8c432",color:"black",border:"none",borderRadius:"4px",cursor:"pointer"}},"Show Warning"),react.createElement("button",{onClick:()=>AlertService_AlertService.info("Information message!"),style:{padding:"0.5rem 1rem",background:"#fa9674",color:"white",border:"none",borderRadius:"4px",cursor:"pointer"}},"Show Info"),react.createElement("button",{onClick:()=>AlertService_AlertService.clear(),style:{padding:"0.5rem 1rem",background:"#6c757d",color:"white",border:"none",borderRadius:"4px",cursor:"pointer"}},"Clear All")),react.createElement("div",{style:{display:"flex",flexWrap:"wrap",gap:"0.5rem",marginBottom:"1rem"}},react.createElement("button",{onClick:()=>{AlertService_AlertService.success("Auto-hide alert (3s)",{autoHideDuration:3e3})},style:{padding:"0.5rem 1rem",background:"#6065f2",color:"white",border:"none",borderRadius:"4px",cursor:"pointer"}},"Auto-hide (3s)"),react.createElement("button",{onClick:()=>{AlertService_AlertService.show("Alert with animation",{animation:"bounce",variant:"primary",withIcon:!0})},style:{padding:"0.5rem 1rem",background:"#6065f2",color:"white",border:"none",borderRadius:"4px",cursor:"pointer"}},"With Animation"),react.createElement("button",{onClick:async()=>{try{await AlertService_AlertService.confirm("Are you sure you want to continue?"),AlertService_AlertService.success("Action confirmed!")}catch(err){AlertService_AlertService.info("Action cancelled")}},style:{padding:"0.5rem 1rem",background:"#6065f2",color:"white",border:"none",borderRadius:"4px",cursor:"pointer"}},"Confirmation"),react.createElement("button",{onClick:()=>{const progressAlert=AlertService_AlertService.progress("Operation in progress...",{variant:"info",withIcon:!0});let progress=0;const interval=setInterval((()=>{progress+=.1,progressAlert.update("Processing...",progress),progress>=1&&(clearInterval(interval),progressAlert.complete("Operation completed successfully!"))}),500)},style:{padding:"0.5rem 1rem",background:"#6065f2",color:"white",border:"none",borderRadius:"4px",cursor:"pointer"}},"Progress Alert")))),Default=Template.bind({});Default.args={position:"top-right",newestOnTop:!0,limit:5,spacing:10,containerWidth:300};const BottomLeft=Template.bind({});BottomLeft.args={position:"bottom-left",newestOnTop:!1,limit:5,spacing:10,containerWidth:300};const TopCenter=Template.bind({});TopCenter.args={position:"top-center",newestOnTop:!0,limit:5,spacing:10,containerWidth:300};const NoLimit=Template.bind({});NoLimit.args={position:"top-right",newestOnTop:!0,limit:0,spacing:10,containerWidth:300};const DarkMode=Template.bind({});DarkMode.args={position:"top-right",newestOnTop:!0,limit:5,spacing:10,containerWidth:300,darkMode:!0};const __namedExportsOrder=["Default","BottomLeft","TopCenter","NoLimit","DarkMode"];Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"args => {\n  // Reset alerts when story changes\n  React.useEffect(() => {\n    return () => {\n      AlertService.clear();\n    };\n  }, []);\n  return <div style={{\n    padding: '1rem'\n  }}>\n      <AlertContainer {...args} />\n      \n      <div style={{\n      marginBottom: '2rem'\n    }}>\n        <h2>AlertContainer Demo</h2>\n        <p>Try the different buttons below to show various alert types:</p>\n      </div>\n      \n      <div style={{\n      display: 'flex',\n      flexWrap: 'wrap',\n      gap: '0.5rem',\n      marginBottom: '1rem'\n    }}>\n        <button onClick={() => AlertService.success('Success message!')} style={{\n        padding: '0.5rem 1rem',\n        background: '#57d25f',\n        color: 'white',\n        border: 'none',\n        borderRadius: '4px',\n        cursor: 'pointer'\n      }}>\n          Show Success\n        </button>\n        \n        <button onClick={() => AlertService.error('Error message!')} style={{\n        padding: '0.5rem 1rem',\n        background: '#e873a9',\n        color: 'white',\n        border: 'none',\n        borderRadius: '4px',\n        cursor: 'pointer'\n      }}>\n          Show Error\n        </button>\n        \n        <button onClick={() => AlertService.warning('Warning message!')} style={{\n        padding: '0.5rem 1rem',\n        background: '#f8c432',\n        color: 'black',\n        border: 'none',\n        borderRadius: '4px',\n        cursor: 'pointer'\n      }}>\n          Show Warning\n        </button>\n        \n        <button onClick={() => AlertService.info('Information message!')} style={{\n        padding: '0.5rem 1rem',\n        background: '#fa9674',\n        color: 'white',\n        border: 'none',\n        borderRadius: '4px',\n        cursor: 'pointer'\n      }}>\n          Show Info\n        </button>\n        \n        <button onClick={() => AlertService.clear()} style={{\n        padding: '0.5rem 1rem',\n        background: '#6c757d',\n        color: 'white',\n        border: 'none',\n        borderRadius: '4px',\n        cursor: 'pointer'\n      }}>\n          Clear All\n        </button>\n      </div>\n      \n      <div style={{\n      display: 'flex',\n      flexWrap: 'wrap',\n      gap: '0.5rem',\n      marginBottom: '1rem'\n    }}>\n        <button onClick={() => {\n        AlertService.success('Auto-hide alert (3s)', {\n          autoHideDuration: 3000\n        });\n      }} style={{\n        padding: '0.5rem 1rem',\n        background: '#6065f2',\n        color: 'white',\n        border: 'none',\n        borderRadius: '4px',\n        cursor: 'pointer'\n      }}>\n          Auto-hide (3s)\n        </button>\n        \n        <button onClick={() => {\n        AlertService.show('Alert with animation', {\n          animation: 'bounce',\n          variant: 'primary',\n          withIcon: true\n        });\n      }} style={{\n        padding: '0.5rem 1rem',\n        background: '#6065f2',\n        color: 'white',\n        border: 'none',\n        borderRadius: '4px',\n        cursor: 'pointer'\n      }}>\n          With Animation\n        </button>\n        \n        <button onClick={async () => {\n        try {\n          await AlertService.confirm('Are you sure you want to continue?');\n          AlertService.success('Action confirmed!');\n        } catch (err) {\n          AlertService.info('Action cancelled');\n        }\n      }} style={{\n        padding: '0.5rem 1rem',\n        background: '#6065f2',\n        color: 'white',\n        border: 'none',\n        borderRadius: '4px',\n        cursor: 'pointer'\n      }}>\n          Confirmation\n        </button>\n        \n        <button onClick={() => {\n        const progressAlert = AlertService.progress('Operation in progress...', {\n          variant: 'info',\n          withIcon: true\n        });\n        let progress = 0;\n        const interval = setInterval(() => {\n          progress += 0.1;\n          progressAlert.update('Processing...', progress);\n          if (progress >= 1) {\n            clearInterval(interval);\n            progressAlert.complete('Operation completed successfully!');\n          }\n        }, 500);\n      }} style={{\n        padding: '0.5rem 1rem',\n        background: '#6065f2',\n        color: 'white',\n        border: 'none',\n        borderRadius: '4px',\n        cursor: 'pointer'\n      }}>\n          Progress Alert\n        </button>\n      </div>\n    </div>;\n}",...Default.parameters?.docs?.source}}},BottomLeft.parameters={...BottomLeft.parameters,docs:{...BottomLeft.parameters?.docs,source:{originalSource:"args => {\n  // Reset alerts when story changes\n  React.useEffect(() => {\n    return () => {\n      AlertService.clear();\n    };\n  }, []);\n  return <div style={{\n    padding: '1rem'\n  }}>\n      <AlertContainer {...args} />\n      \n      <div style={{\n      marginBottom: '2rem'\n    }}>\n        <h2>AlertContainer Demo</h2>\n        <p>Try the different buttons below to show various alert types:</p>\n      </div>\n      \n      <div style={{\n      display: 'flex',\n      flexWrap: 'wrap',\n      gap: '0.5rem',\n      marginBottom: '1rem'\n    }}>\n        <button onClick={() => AlertService.success('Success message!')} style={{\n        padding: '0.5rem 1rem',\n        background: '#57d25f',\n        color: 'white',\n        border: 'none',\n        borderRadius: '4px',\n        cursor: 'pointer'\n      }}>\n          Show Success\n        </button>\n        \n        <button onClick={() => AlertService.error('Error message!')} style={{\n        padding: '0.5rem 1rem',\n        background: '#e873a9',\n        color: 'white',\n        border: 'none',\n        borderRadius: '4px',\n        cursor: 'pointer'\n      }}>\n          Show Error\n        </button>\n        \n        <button onClick={() => AlertService.warning('Warning message!')} style={{\n        padding: '0.5rem 1rem',\n        background: '#f8c432',\n        color: 'black',\n        border: 'none',\n        borderRadius: '4px',\n        cursor: 'pointer'\n      }}>\n          Show Warning\n        </button>\n        \n        <button onClick={() => AlertService.info('Information message!')} style={{\n        padding: '0.5rem 1rem',\n        background: '#fa9674',\n        color: 'white',\n        border: 'none',\n        borderRadius: '4px',\n        cursor: 'pointer'\n      }}>\n          Show Info\n        </button>\n        \n        <button onClick={() => AlertService.clear()} style={{\n        padding: '0.5rem 1rem',\n        background: '#6c757d',\n        color: 'white',\n        border: 'none',\n        borderRadius: '4px',\n        cursor: 'pointer'\n      }}>\n          Clear All\n        </button>\n      </div>\n      \n      <div style={{\n      display: 'flex',\n      flexWrap: 'wrap',\n      gap: '0.5rem',\n      marginBottom: '1rem'\n    }}>\n        <button onClick={() => {\n        AlertService.success('Auto-hide alert (3s)', {\n          autoHideDuration: 3000\n        });\n      }} style={{\n        padding: '0.5rem 1rem',\n        background: '#6065f2',\n        color: 'white',\n        border: 'none',\n        borderRadius: '4px',\n        cursor: 'pointer'\n      }}>\n          Auto-hide (3s)\n        </button>\n        \n        <button onClick={() => {\n        AlertService.show('Alert with animation', {\n          animation: 'bounce',\n          variant: 'primary',\n          withIcon: true\n        });\n      }} style={{\n        padding: '0.5rem 1rem',\n        background: '#6065f2',\n        color: 'white',\n        border: 'none',\n        borderRadius: '4px',\n        cursor: 'pointer'\n      }}>\n          With Animation\n        </button>\n        \n        <button onClick={async () => {\n        try {\n          await AlertService.confirm('Are you sure you want to continue?');\n          AlertService.success('Action confirmed!');\n        } catch (err) {\n          AlertService.info('Action cancelled');\n        }\n      }} style={{\n        padding: '0.5rem 1rem',\n        background: '#6065f2',\n        color: 'white',\n        border: 'none',\n        borderRadius: '4px',\n        cursor: 'pointer'\n      }}>\n          Confirmation\n        </button>\n        \n        <button onClick={() => {\n        const progressAlert = AlertService.progress('Operation in progress...', {\n          variant: 'info',\n          withIcon: true\n        });\n        let progress = 0;\n        const interval = setInterval(() => {\n          progress += 0.1;\n          progressAlert.update('Processing...', progress);\n          if (progress >= 1) {\n            clearInterval(interval);\n            progressAlert.complete('Operation completed successfully!');\n          }\n        }, 500);\n      }} style={{\n        padding: '0.5rem 1rem',\n        background: '#6065f2',\n        color: 'white',\n        border: 'none',\n        borderRadius: '4px',\n        cursor: 'pointer'\n      }}>\n          Progress Alert\n        </button>\n      </div>\n    </div>;\n}",...BottomLeft.parameters?.docs?.source}}},TopCenter.parameters={...TopCenter.parameters,docs:{...TopCenter.parameters?.docs,source:{originalSource:"args => {\n  // Reset alerts when story changes\n  React.useEffect(() => {\n    return () => {\n      AlertService.clear();\n    };\n  }, []);\n  return <div style={{\n    padding: '1rem'\n  }}>\n      <AlertContainer {...args} />\n      \n      <div style={{\n      marginBottom: '2rem'\n    }}>\n        <h2>AlertContainer Demo</h2>\n        <p>Try the different buttons below to show various alert types:</p>\n      </div>\n      \n      <div style={{\n      display: 'flex',\n      flexWrap: 'wrap',\n      gap: '0.5rem',\n      marginBottom: '1rem'\n    }}>\n        <button onClick={() => AlertService.success('Success message!')} style={{\n        padding: '0.5rem 1rem',\n        background: '#57d25f',\n        color: 'white',\n        border: 'none',\n        borderRadius: '4px',\n        cursor: 'pointer'\n      }}>\n          Show Success\n        </button>\n        \n        <button onClick={() => AlertService.error('Error message!')} style={{\n        padding: '0.5rem 1rem',\n        background: '#e873a9',\n        color: 'white',\n        border: 'none',\n        borderRadius: '4px',\n        cursor: 'pointer'\n      }}>\n          Show Error\n        </button>\n        \n        <button onClick={() => AlertService.warning('Warning message!')} style={{\n        padding: '0.5rem 1rem',\n        background: '#f8c432',\n        color: 'black',\n        border: 'none',\n        borderRadius: '4px',\n        cursor: 'pointer'\n      }}>\n          Show Warning\n        </button>\n        \n        <button onClick={() => AlertService.info('Information message!')} style={{\n        padding: '0.5rem 1rem',\n        background: '#fa9674',\n        color: 'white',\n        border: 'none',\n        borderRadius: '4px',\n        cursor: 'pointer'\n      }}>\n          Show Info\n        </button>\n        \n        <button onClick={() => AlertService.clear()} style={{\n        padding: '0.5rem 1rem',\n        background: '#6c757d',\n        color: 'white',\n        border: 'none',\n        borderRadius: '4px',\n        cursor: 'pointer'\n      }}>\n          Clear All\n        </button>\n      </div>\n      \n      <div style={{\n      display: 'flex',\n      flexWrap: 'wrap',\n      gap: '0.5rem',\n      marginBottom: '1rem'\n    }}>\n        <button onClick={() => {\n        AlertService.success('Auto-hide alert (3s)', {\n          autoHideDuration: 3000\n        });\n      }} style={{\n        padding: '0.5rem 1rem',\n        background: '#6065f2',\n        color: 'white',\n        border: 'none',\n        borderRadius: '4px',\n        cursor: 'pointer'\n      }}>\n          Auto-hide (3s)\n        </button>\n        \n        <button onClick={() => {\n        AlertService.show('Alert with animation', {\n          animation: 'bounce',\n          variant: 'primary',\n          withIcon: true\n        });\n      }} style={{\n        padding: '0.5rem 1rem',\n        background: '#6065f2',\n        color: 'white',\n        border: 'none',\n        borderRadius: '4px',\n        cursor: 'pointer'\n      }}>\n          With Animation\n        </button>\n        \n        <button onClick={async () => {\n        try {\n          await AlertService.confirm('Are you sure you want to continue?');\n          AlertService.success('Action confirmed!');\n        } catch (err) {\n          AlertService.info('Action cancelled');\n        }\n      }} style={{\n        padding: '0.5rem 1rem',\n        background: '#6065f2',\n        color: 'white',\n        border: 'none',\n        borderRadius: '4px',\n        cursor: 'pointer'\n      }}>\n          Confirmation\n        </button>\n        \n        <button onClick={() => {\n        const progressAlert = AlertService.progress('Operation in progress...', {\n          variant: 'info',\n          withIcon: true\n        });\n        let progress = 0;\n        const interval = setInterval(() => {\n          progress += 0.1;\n          progressAlert.update('Processing...', progress);\n          if (progress >= 1) {\n            clearInterval(interval);\n            progressAlert.complete('Operation completed successfully!');\n          }\n        }, 500);\n      }} style={{\n        padding: '0.5rem 1rem',\n        background: '#6065f2',\n        color: 'white',\n        border: 'none',\n        borderRadius: '4px',\n        cursor: 'pointer'\n      }}>\n          Progress Alert\n        </button>\n      </div>\n    </div>;\n}",...TopCenter.parameters?.docs?.source}}},NoLimit.parameters={...NoLimit.parameters,docs:{...NoLimit.parameters?.docs,source:{originalSource:"args => {\n  // Reset alerts when story changes\n  React.useEffect(() => {\n    return () => {\n      AlertService.clear();\n    };\n  }, []);\n  return <div style={{\n    padding: '1rem'\n  }}>\n      <AlertContainer {...args} />\n      \n      <div style={{\n      marginBottom: '2rem'\n    }}>\n        <h2>AlertContainer Demo</h2>\n        <p>Try the different buttons below to show various alert types:</p>\n      </div>\n      \n      <div style={{\n      display: 'flex',\n      flexWrap: 'wrap',\n      gap: '0.5rem',\n      marginBottom: '1rem'\n    }}>\n        <button onClick={() => AlertService.success('Success message!')} style={{\n        padding: '0.5rem 1rem',\n        background: '#57d25f',\n        color: 'white',\n        border: 'none',\n        borderRadius: '4px',\n        cursor: 'pointer'\n      }}>\n          Show Success\n        </button>\n        \n        <button onClick={() => AlertService.error('Error message!')} style={{\n        padding: '0.5rem 1rem',\n        background: '#e873a9',\n        color: 'white',\n        border: 'none',\n        borderRadius: '4px',\n        cursor: 'pointer'\n      }}>\n          Show Error\n        </button>\n        \n        <button onClick={() => AlertService.warning('Warning message!')} style={{\n        padding: '0.5rem 1rem',\n        background: '#f8c432',\n        color: 'black',\n        border: 'none',\n        borderRadius: '4px',\n        cursor: 'pointer'\n      }}>\n          Show Warning\n        </button>\n        \n        <button onClick={() => AlertService.info('Information message!')} style={{\n        padding: '0.5rem 1rem',\n        background: '#fa9674',\n        color: 'white',\n        border: 'none',\n        borderRadius: '4px',\n        cursor: 'pointer'\n      }}>\n          Show Info\n        </button>\n        \n        <button onClick={() => AlertService.clear()} style={{\n        padding: '0.5rem 1rem',\n        background: '#6c757d',\n        color: 'white',\n        border: 'none',\n        borderRadius: '4px',\n        cursor: 'pointer'\n      }}>\n          Clear All\n        </button>\n      </div>\n      \n      <div style={{\n      display: 'flex',\n      flexWrap: 'wrap',\n      gap: '0.5rem',\n      marginBottom: '1rem'\n    }}>\n        <button onClick={() => {\n        AlertService.success('Auto-hide alert (3s)', {\n          autoHideDuration: 3000\n        });\n      }} style={{\n        padding: '0.5rem 1rem',\n        background: '#6065f2',\n        color: 'white',\n        border: 'none',\n        borderRadius: '4px',\n        cursor: 'pointer'\n      }}>\n          Auto-hide (3s)\n        </button>\n        \n        <button onClick={() => {\n        AlertService.show('Alert with animation', {\n          animation: 'bounce',\n          variant: 'primary',\n          withIcon: true\n        });\n      }} style={{\n        padding: '0.5rem 1rem',\n        background: '#6065f2',\n        color: 'white',\n        border: 'none',\n        borderRadius: '4px',\n        cursor: 'pointer'\n      }}>\n          With Animation\n        </button>\n        \n        <button onClick={async () => {\n        try {\n          await AlertService.confirm('Are you sure you want to continue?');\n          AlertService.success('Action confirmed!');\n        } catch (err) {\n          AlertService.info('Action cancelled');\n        }\n      }} style={{\n        padding: '0.5rem 1rem',\n        background: '#6065f2',\n        color: 'white',\n        border: 'none',\n        borderRadius: '4px',\n        cursor: 'pointer'\n      }}>\n          Confirmation\n        </button>\n        \n        <button onClick={() => {\n        const progressAlert = AlertService.progress('Operation in progress...', {\n          variant: 'info',\n          withIcon: true\n        });\n        let progress = 0;\n        const interval = setInterval(() => {\n          progress += 0.1;\n          progressAlert.update('Processing...', progress);\n          if (progress >= 1) {\n            clearInterval(interval);\n            progressAlert.complete('Operation completed successfully!');\n          }\n        }, 500);\n      }} style={{\n        padding: '0.5rem 1rem',\n        background: '#6065f2',\n        color: 'white',\n        border: 'none',\n        borderRadius: '4px',\n        cursor: 'pointer'\n      }}>\n          Progress Alert\n        </button>\n      </div>\n    </div>;\n}",...NoLimit.parameters?.docs?.source}}},DarkMode.parameters={...DarkMode.parameters,docs:{...DarkMode.parameters?.docs,source:{originalSource:"args => {\n  // Reset alerts when story changes\n  React.useEffect(() => {\n    return () => {\n      AlertService.clear();\n    };\n  }, []);\n  return <div style={{\n    padding: '1rem'\n  }}>\n      <AlertContainer {...args} />\n      \n      <div style={{\n      marginBottom: '2rem'\n    }}>\n        <h2>AlertContainer Demo</h2>\n        <p>Try the different buttons below to show various alert types:</p>\n      </div>\n      \n      <div style={{\n      display: 'flex',\n      flexWrap: 'wrap',\n      gap: '0.5rem',\n      marginBottom: '1rem'\n    }}>\n        <button onClick={() => AlertService.success('Success message!')} style={{\n        padding: '0.5rem 1rem',\n        background: '#57d25f',\n        color: 'white',\n        border: 'none',\n        borderRadius: '4px',\n        cursor: 'pointer'\n      }}>\n          Show Success\n        </button>\n        \n        <button onClick={() => AlertService.error('Error message!')} style={{\n        padding: '0.5rem 1rem',\n        background: '#e873a9',\n        color: 'white',\n        border: 'none',\n        borderRadius: '4px',\n        cursor: 'pointer'\n      }}>\n          Show Error\n        </button>\n        \n        <button onClick={() => AlertService.warning('Warning message!')} style={{\n        padding: '0.5rem 1rem',\n        background: '#f8c432',\n        color: 'black',\n        border: 'none',\n        borderRadius: '4px',\n        cursor: 'pointer'\n      }}>\n          Show Warning\n        </button>\n        \n        <button onClick={() => AlertService.info('Information message!')} style={{\n        padding: '0.5rem 1rem',\n        background: '#fa9674',\n        color: 'white',\n        border: 'none',\n        borderRadius: '4px',\n        cursor: 'pointer'\n      }}>\n          Show Info\n        </button>\n        \n        <button onClick={() => AlertService.clear()} style={{\n        padding: '0.5rem 1rem',\n        background: '#6c757d',\n        color: 'white',\n        border: 'none',\n        borderRadius: '4px',\n        cursor: 'pointer'\n      }}>\n          Clear All\n        </button>\n      </div>\n      \n      <div style={{\n      display: 'flex',\n      flexWrap: 'wrap',\n      gap: '0.5rem',\n      marginBottom: '1rem'\n    }}>\n        <button onClick={() => {\n        AlertService.success('Auto-hide alert (3s)', {\n          autoHideDuration: 3000\n        });\n      }} style={{\n        padding: '0.5rem 1rem',\n        background: '#6065f2',\n        color: 'white',\n        border: 'none',\n        borderRadius: '4px',\n        cursor: 'pointer'\n      }}>\n          Auto-hide (3s)\n        </button>\n        \n        <button onClick={() => {\n        AlertService.show('Alert with animation', {\n          animation: 'bounce',\n          variant: 'primary',\n          withIcon: true\n        });\n      }} style={{\n        padding: '0.5rem 1rem',\n        background: '#6065f2',\n        color: 'white',\n        border: 'none',\n        borderRadius: '4px',\n        cursor: 'pointer'\n      }}>\n          With Animation\n        </button>\n        \n        <button onClick={async () => {\n        try {\n          await AlertService.confirm('Are you sure you want to continue?');\n          AlertService.success('Action confirmed!');\n        } catch (err) {\n          AlertService.info('Action cancelled');\n        }\n      }} style={{\n        padding: '0.5rem 1rem',\n        background: '#6065f2',\n        color: 'white',\n        border: 'none',\n        borderRadius: '4px',\n        cursor: 'pointer'\n      }}>\n          Confirmation\n        </button>\n        \n        <button onClick={() => {\n        const progressAlert = AlertService.progress('Operation in progress...', {\n          variant: 'info',\n          withIcon: true\n        });\n        let progress = 0;\n        const interval = setInterval(() => {\n          progress += 0.1;\n          progressAlert.update('Processing...', progress);\n          if (progress >= 1) {\n            clearInterval(interval);\n            progressAlert.complete('Operation completed successfully!');\n          }\n        }, 500);\n      }} style={{\n        padding: '0.5rem 1rem',\n        background: '#6065f2',\n        color: 'white',\n        border: 'none',\n        borderRadius: '4px',\n        cursor: 'pointer'\n      }}>\n          Progress Alert\n        </button>\n      </div>\n    </div>;\n}",...DarkMode.parameters?.docs?.source}}}}}]);